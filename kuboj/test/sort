function int[] quicksort(int[] array, int length) {
  var int[] retval;

  if (length <= 1) {
    retval = array;
  } else {
    var int pivot;
    pivot = array[length - 1];
    var int num_of_less_than_pivot;
    num_of_less_than_pivot = 0;
    var int j;
    for (j < length; j += 1) {
      if (array[j] < pivot) {
        num_of_less_than_pivot += 1;
      }
    }

    var int[] less;
    less = mallocint(num_of_less_than_pivot);
    var int less_length;    
    less_length = 0;

    var int[] greater;
    greater = mallocint(length - 1 - num_of_less_than_pivot);
    var int greater_length;    
    greater_length = 0;

    j = 0;
    for (j < length; j += 1) {
      if (array[j] < pivot) {
        less[less_length] = array[j];
        less_length += 1;
      } else {
        greater[greater_length] = array[j];
        greater_length += 1; 
      }
    }
  
    var int[] sorted_less;
    sorted_less = quicksort(less, less_length);
    var int[] sorted_greater;
    sorted_greater = quicksort(greater, greater_length);

    var int[] new_array;
    new_array = mallocint(length);
    j = 0;
    for (j < less_length; j += 1) {
      new_array[j] = sorted_less[j];
    }
    new_array[less_length] = pivot;
    j = 0;
    for (j < greater_length; j += 1) {
      new_array[j + less_length] = sorted_greater[j];
    }

    retval = new_array;
  }

  return retval;
}

function int main() {
  var int n;
  n = readint();
  var int[] a;
  a = mallocint(n);
  var int i;  
  for (i < n; i += 1) {
    a[i] = readint();
  }

  var int[] sorted;
  sorted = quicksort(a, n);

  i = 0;
  for (i < n; i += 1) {
    writeintnl(sorted[i]);
  }
  return 0;
}
